[
  {
    "function": "cast_sparse",
    "package": "Matrix/rsparse",
    "explanation": "Create a sparse matrix from tidy triplets (row, col, value)."
  },
  {
    "function": "as.matrix",
    "package": "base",
    "explanation": "Coerce to a matrix type."
  },
  {
    "function": "as.numeric",
    "package": "base",
    "explanation": "Coerce to numeric type."
  },
  {
    "function": "c",
    "package": "base",
    "explanation": "This is a generic function which combines its arguments."
  },
  {
    "function": "data",
    "package": "base",
    "explanation": "Load example datasets from a package."
  },
  {
    "function": "mean",
    "package": "base",
    "explanation": "Generic function for the (trimmed) arithmetic mean."
  },
  {
    "function": "nchar",
    "package": "base",
    "explanation": "nchartakes a character vector as an argument and returns a vector whose elements contain the sizes of the corresponding elements ofx. Internally, it is a generic, for which methods can be defined."
  },
  {
    "function": "paste",
    "package": "base",
    "explanation": "Concatenate vectors after converting to character."
  },
  {
    "function": "paste0",
    "package": "base",
    "explanation": "Concatenate strings without a separator."
  },
  {
    "function": "rowSums",
    "package": "base",
    "explanation": "Sum across rows of a matrix/data frame."
  },
  {
    "function": "set.seed",
    "package": "base",
    "explanation": "Set the random number generator seed for reproducibility."
  },
  {
    "function": "sqrt",
    "package": "base",
    "explanation": "Square root; also used for vector norms."
  },
  {
    "function": "sum",
    "package": "base",
    "explanation": "sumreturns the sum of all the values present in its arguments."
  },
  {
    "function": "tidy",
    "package": "broom",
    "explanation": "Coerce model objects into tidy data frames (used by tidytext/topicmodels)."
  },
  {
    "function": "naive_Bayes",
    "package": "discrim",
    "explanation": "NaÃ¯ve Bayes classifier specification (assumes conditional independence of predictors). Specify engine (e.g., `LiblineaR`, `ranger`, `naivebayes`) and mode; keep a null/baseline model for comparison."
  },
  {
    "function": "add_count",
    "package": "dplyr",
    "explanation": "Add a column n with counts per group while keeping original rows. Adds frequency column `n` while keeping all rows; use `sort = TRUE` to order by counts."
  },
  {
    "function": "anti_join",
    "package": "dplyr",
    "explanation": "Filter left table to rows that do **not** have a match in the right table; no columns are added. Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Typical use: find missing/extra keys, do QA checks."
  },
  {
    "function": "arrange",
    "package": "dplyr",
    "explanation": "Sort rows by one or more columns; use desc(x) or negative number for descending. Use `desc(x)` for descending. Sorting is stable; missing values are placed at the end by default."
  },
  {
    "function": "count",
    "package": "dplyr",
    "explanation": "count()lets you quickly count the unique values of one or more variables:df %>% count(a, b)is roughly equivalent todf %>% group_by(a, b) %>% summarise(n = n()).count()is paired withtally(), a lower-level helper that is equivalent todf %>% summarise(n = n()). Supplywtto perform weighted counts, switching the summary fromn = n()ton = sum(wt)."
  },
  {
    "function": "filter",
    "package": "dplyr",
    "explanation": "Thefilter()function is used to subset a data frame, retaining all rows that satisfy your conditions. To be retained, the row must produce a value ofTRUEfor all conditions. Note that when a condition evaluates toNAthe row will be dropped, unlike base subsetting with[."
  },
  {
    "function": "full_join",
    "package": "dplyr",
    "explanation": "Keep all rows from both tables (SQL full outer join). Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Typical use: union-like merge while preserving unmatched records from both sides."
  },
  {
    "function": "group_by",
    "package": "dplyr",
    "explanation": "Most data operations are done on groups defined by variables.group_by()takes an existing tbl and converts it into a grouped tbl where operations are performed \"by group\".ungroup()removes grouping."
  },
  {
    "function": "inner_join",
    "package": "dplyr",
    "explanation": "Return only rows where keys appear in both tables (intersection). Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Typical use: enrich observations only when a match exists."
  },
  {
    "function": "left_join",
    "package": "dplyr",
    "explanation": "Keep all rows from the left table and add matching columns from the right; unmatched rows get `NA`. Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Typical use: add lookup fields without dropping left rows."
  },
  {
    "function": "mutate",
    "package": "dplyr",
    "explanation": "mutate()adds new variables and preserves existing ones;transmute()adds new variables and drops existing ones. New variables overwrite existing variables of the same name. Variables can be removed by setting their value toNULL."
  },
  {
    "function": "rename",
    "package": "dplyr",
    "explanation": "rename()changes the names of individual variables usingnew_name = old_namesyntax;rename_with()renames columns using a function."
  },
  {
    "function": "right_join",
    "package": "dplyr",
    "explanation": "Keep all rows from the right table and add matching columns from the left; unmatched rows get `NA`. Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Useful when the right table defines the universe of interest."
  },
  {
    "function": "select",
    "package": "dplyr",
    "explanation": "Select (and optionally rename) variables in a data frame, using a concise mini-language that makes it easy to refer to variables based on their name (e.g.a:fselects all columns fromaon the left tofon the right). You can also use predicate functions likeis.numericto select variables based on their properties."
  },
  {
    "function": "semi_join",
    "package": "dplyr",
    "explanation": "Filter left table to rows that have a match in the right table; no columns are added. Matches rows from two tables based on key columns specified with `by =` (e.g., `by = c(\"id\" = \"id\")`). Common args: `by`, `suffix` (to disambiguate duplicate column names), `keep = FALSE` (keep join keys from both sides), and `relationship` (1-to-1, 1-to-many checks). Pitfalls: duplicated keys can multiply rows; mismatched types prevent joins; use `count()` first to inspect key uniqueness. Typical use: keep only left rows that exist in a reference set."
  },
  {
    "function": "slice_max",
    "package": "dplyr",
    "explanation": "Keep the top n rows by a variable, optionally per group. Select top `n` or `prop` rows by `order_by`, optionally per group (`by`). Prefer over deprecated `top_n()`."
  },
  {
    "function": "slice_min",
    "package": "dplyr",
    "explanation": "Keep the bottom n rows by a variable, optionally per group. Select bottom `n` or `prop` rows by `order_by`, optionally per group (`by`)."
  },
  {
    "function": "summarize",
    "package": "dplyr",
    "explanation": "Compute summary rows (e.g., n(), mean(), sum()) for each group (or whole data if not grouped). Use with aggregators like `n()`, `mean()`, `sum()`, `median()`. Common args: `.groups = \"drop\"` to ungroup automatically. Spelling `summarise()` also valid."
  },
  {
    "function": "top_n",
    "package": "dplyr",
    "explanation": "top_n()has been superseded in favour ofslice_min()/slice_max(). While it will not be deprecated in the near future, retirement means that we will only perform critical bug fixes, so we recommend moving to the newer alternatives."
  },
  {
    "function": "ungroup",
    "package": "dplyr",
    "explanation": "Remove any existing grouping from a data frame. Removes grouping. Use after `summarize()` to avoid grouped behavior downstream."
  },
  {
    "function": "fct_reorder",
    "package": "forcats",
    "explanation": "fct_reorder()is useful for 1d displays where the factor is mapped to position;fct_reorder2()for 2d displays where the factor is mapped to a non-position aesthetic.last2()andfirst2()are helpers forfct_reorder2();last2()finds the last value ofywhen sorted byx;first2()finds the first value."
  },
  {
    "function": "future_map",
    "package": "furrr",
    "explanation": "These functions work exactly the same aspurrr::map()and its variants, but allow you to map in parallel."
  },
  {
    "function": "plan",
    "package": "future",
    "explanation": "This function allowsthe userto plan the future, more specifically, it specifies howfuture():s are resolved, e.g. sequentially or in parallel."
  },
  {
    "function": "aes",
    "package": "ggplot2",
    "explanation": "Aesthetic mappings describe how variables in the data are mapped to visual properties (aesthetics) of geoms. Aesthetic mappings can be set inggplot()and in individual layers."
  },
  {
    "function": "autoplot",
    "package": "ggplot2",
    "explanation": "autoplot()uses ggplot2 to draw a particular plot for an object of a particular class in a single command. This defines the S3 generic that other classes and packages can extend."
  },
  {
    "function": "coord_flip",
    "package": "ggplot2",
    "explanation": "<p><a href=\"https://lifecycle.r-lib.org/articles/stages.html#superseded\"><img src=\"figures/lifecycle-superseded.svg?package=ggplot2&version=3.5.2\" alt=\"[Superseded]\"></a></p> <p>This function is superseded because in many cases, <code>coord_flip()</code> can easily be replaced by swapping the x and y aesthetics, or optionally setting the <code>orientation</code> argument in geom and stat layers.</p> <p><code>coord_flip()</code> is useful for geoms and statistics that do not support the <code>..."
  },
  {
    "function": "facet_wrap",
    "package": "ggplot2",
    "explanation": "facet_wrap()wraps a 1d sequence of panels into 2d. This is generally a better use of screen space thanfacet_grid()because most displays are roughly rectangular."
  },
  {
    "function": "geom_abline",
    "package": "ggplot2",
    "explanation": "These geoms add reference lines (sometimes called rules) to a plot, either horizontal, vertical, or diagonal (specified by slope and intercept). These are useful for annotating plots."
  },
  {
    "function": "geom_col",
    "package": "ggplot2",
    "explanation": "Bar plot where bar heights represent precomputed values (no statistical transformation)."
  },
  {
    "function": "geom_point",
    "package": "ggplot2",
    "explanation": "The point geom is used to create scatterplots. The scatterplot is most useful for displaying the relationship between two continuous variables. It can be used to compare one continuous and one categorical variable, or two categorical variables, but a variation likegeom_jitter(),geom_count(), orgeom_bin_2d()is usually more appropriate. Abubblechartis a scatterplot with a third variable mapped to the size of points."
  },
  {
    "function": "ggplot",
    "package": "ggplot2",
    "explanation": "ggplot()initializes a ggplot object. It can be used to declare the input data frame for a graphic and to specify the set of plot aesthetics intended to be common throughout all subsequent layers unless specifically overridden."
  },
  {
    "function": "labs",
    "package": "ggplot2",
    "explanation": "Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name. Use the plottitleandsubtitleto explain the main findings. It's common to use thecaptionto provide information about the data source.tagcan be used for adding identification tags to differentiate between multiple plots."
  },
  {
    "function": "fit",
    "package": "parsnip",
    "explanation": "Train a model or workflow on a dataset. Workflows keep preprocessing and model spec together, making resampling/tuning reproducible."
  },
  {
    "function": "null_model",
    "package": "parsnip",
    "explanation": "Specify a model that predicts the average (regression) or majority class (classification). Specify engine (e.g., `LiblineaR`, `ranger`, `naivebayes`) and mode; keep a null/baseline model for comparison."
  },
  {
    "function": "rand_forest",
    "package": "parsnip",
    "explanation": "rand_forest()defines a model that creates a large number of decision trees, each independent of the others. The final prediction uses all predictions from the individual trees and combines them. This function can fit classification, regression, and censored regression models."
  },
  {
    "function": "set_engine",
    "package": "parsnip",
    "explanation": "Choose the underlying implementation/library for a model. Specify engine (e.g., `LiblineaR`, `ranger`, `naivebayes`) and mode; keep a null/baseline model for comparison."
  },
  {
    "function": "set_mode",
    "package": "parsnip",
    "explanation": "Set the mode: 'regression' or 'classification' for a model. Specify engine (e.g., `LiblineaR`, `ranger`, `naivebayes`) and mode; keep a null/baseline model for comparison."
  },
  {
    "function": "svm_linear",
    "package": "parsnip",
    "explanation": "svm_linear()defines a support vector machine model. For classification, the model tries to maximize the width of the margin between classes (using a linear class boundary). For regression, the model optimizes a robust loss function that is only affected by very large model residuals and uses a linear fit. This function can fit classification and regression models."
  },
  {
    "function": "map2",
    "package": "purrr",
    "explanation": "These functions are variants ofmap()that iterate over two arguments at a time."
  },
  {
    "function": "pluck",
    "package": "purrr",
    "explanation": "pluck()implements a generalised form of[[that allow you to index deeply and flexibly into data structures. It always succeeds, returning.defaultif the index you are trying to access does not exist or isNULL."
  },
  {
    "function": "safely",
    "package": "purrr",
    "explanation": "Creates a modified version of.fthat always succeeds. It returns a list with componentsresultanderror. If the function succeeds,resultcontains the returned value anderrorisNULL. If an error occurred,erroris anerrorobject andresultis eitherNULLorotherwise."
  },
  {
    "function": "corpus",
    "package": "quanteda",
    "explanation": "Creates a corpus object from available sources. The currently available sources are:"
  },
  {
    "function": "tokens",
    "package": "quanteda",
    "explanation": "Construct a tokens object, either by importing a named list of characters from an external tokenizer, or by calling the internalquantedatokenizer."
  },
  {
    "function": "read_csv",
    "package": "readr",
    "explanation": "Fast read of a CSV file into a tibble; guesses column types."
  },
  {
    "function": "readtext",
    "package": "readtext",
    "explanation": "Read texts and (if any) associated document-level meta-data from one or more source files. The text source files come from the textual component of the files, and the document-level metadata (\"docvars\") come from either the file contents or filenames."
  },
  {
    "function": "bake",
    "package": "recipes",
    "explanation": "Apply estimated preprocessing steps to data. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "prep",
    "package": "recipes",
    "explanation": "Estimate preprocessing steps using training data. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "recipe",
    "package": "recipes",
    "explanation": "Define a sequence of preprocessing steps for modeling. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "step_normalize",
    "package": "recipes",
    "explanation": "Center and scale numeric predictors. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "initial_split",
    "package": "rsample",
    "explanation": "initial_split()creates a single binary split of the data into a training set and testing set.initial_time_split()does the same, but takes thefirstpropsamples for training, instead of a random selection.group_initial_split()creates splits of the data based on some grouping variable, so that all data in a \"group\" is assigned to the same split."
  },
  {
    "function": "testing",
    "package": "rsample",
    "explanation": "Extract the testing portion from an rsample split."
  },
  {
    "function": "training",
    "package": "rsample",
    "explanation": "Extract the training portion from an rsample split."
  },
  {
    "function": "vfold_cv",
    "package": "rsample",
    "explanation": "V-fold cross-validation (also known as k-fold cross-validation) randomly splits the data into V groups of roughly equal size (called \"folds\"). A resample of the analysis data consists of V-1 of the folds while the assessment set contains the final fold. In basic V-fold cross-validation (i.e. no repeats), the number of resamples is equal to V."
  },
  {
    "function": "slide",
    "package": "slider",
    "explanation": "slide()iterates through.xusing a sliding window, applying.fto each sub-window of.x."
  },
  {
    "function": "stopwords",
    "package": "stopwords",
    "explanation": "This function returns character vectors of stopwords for different languages, using theISO-639-1 language codes, and allows for different sources of stopwords to be defined."
  },
  {
    "function": "str_detect",
    "package": "stringr",
    "explanation": "Test whether a string contains a pattern (regex), returning TRUE/FALSE. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_flatten",
    "package": "stringr",
    "explanation": "Concatenate a character vector into a single string with a separator. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_length",
    "package": "stringr",
    "explanation": "str_length()returns the number of codepoints in a string. These are the individual elements (which are often, but not always letters) that can be extracted withstr_sub()."
  },
  {
    "function": "str_locate_all",
    "package": "stringr",
    "explanation": "Locate start/end positions of all matches for a regex in each string. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_pad",
    "package": "stringr",
    "explanation": "Pad strings to a fixed width on the left, right, or both. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_replace",
    "package": "stringr",
    "explanation": "Replace the first match of a pattern with a replacement. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_replace_all",
    "package": "stringr",
    "explanation": "Replace all matches of a pattern (regex) with a replacement. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_squish",
    "package": "stringr",
    "explanation": "Trim and collapse multiple spaces to a single space within strings. Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_sub",
    "package": "stringr",
    "explanation": "str_sub()extracts or replaces the elements at a single position in each string.str_sub_all()allows you to extract strings at multiple elements in every string."
  },
  {
    "function": "str_trim",
    "package": "stringr",
    "explanation": "Trim whitespace from start/end of strings (left, right, or both). Patterns are regular expressions by default; set `fixed()` for literal matching to avoid regex surprises."
  },
  {
    "function": "str_view_all",
    "package": "stringr",
    "explanation": "Visually display regex matches in strings (interactive printing)."
  },
  {
    "function": "step_stopwords",
    "package": "textrecipes",
    "explanation": "Remove stop words from tokenized text using a chosen lexicon. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "step_tfidf",
    "package": "textrecipes",
    "explanation": "step_tfidf()creates aspecificationof a recipe step that will convert atokenvariable into multiple variables containing the term frequency-inverse document frequency of tokens."
  },
  {
    "function": "step_tokenfilter",
    "package": "textrecipes",
    "explanation": "Keep only the most frequent tokens (e.g., top 1,000). Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "step_tokenize",
    "package": "textrecipes",
    "explanation": "Tokenize text columns into tokens. Recipes define preprocessing independent of the model; `prep()` estimates parameters on training data; `bake()` applies them."
  },
  {
    "function": "glimpse",
    "package": "tibble",
    "explanation": "Preview a tibble: columns, types, and examples of values."
  },
  {
    "function": "tibble",
    "package": "tibble",
    "explanation": "tibble()constructs a data frame. It is used likebase::data.frame(), but with a couple notable differences:"
  },
  {
    "function": "nest",
    "package": "tidyr",
    "explanation": "Nesting creates a list-column of data frames; unnesting flattens it back out into regular columns. Nesting is implicitly a summarising operation: you get one row for each group defined by the non-nested columns. This is useful in conjunction with other summaries that work with whole datasets, most notably models."
  },
  {
    "function": "pivot_longer",
    "package": "tidyr",
    "explanation": "Turn wide data into long (tidy) format by gathering columns into key-value pairs. Common args: `names_from`, `values_from`; resolve duplicates with `values_fn = list(value = sum)` and `values_fill` for missing combinations."
  },
  {
    "function": "pivot_wider",
    "package": "tidyr",
    "explanation": "Turn long data into wide format by spreading values across multiple columns. Common args: `names_from`, `values_from`; resolve duplicates with `values_fn = list(value = sum)` and `values_fill` for missing combinations."
  },
  {
    "function": "unite",
    "package": "tidyr",
    "explanation": "Convenience function to paste together multiple columns into one."
  },
  {
    "function": "unnest",
    "package": "tidyr",
    "explanation": "Unnest expands a list-column containing data frames into rows and columns."
  },
  {
    "function": "get_sentiments",
    "package": "tidytext",
    "explanation": "Get specific sentiment lexicons in a tidy format, with one row per word, in a form that can be joined with a one-word-per-row dataset. The\"bing\"option comes from the includedsentiments()data frame, and others call the relevant function in thetextdatapackage."
  },
  {
    "function": "reorder_within",
    "package": "tidytext",
    "explanation": "Reorder a column before plotting with faceting, such that the values are ordered within each facet. This requires two functions:reorder_withinapplied to the column, then eitherscale_x_reorderedorscale_y_reorderedadded to the plot. This is implemented as a bit of a hack: it appends ___ and then the facet at the end of each string."
  },
  {
    "function": "scale_x_reordered",
    "package": "tidytext",
    "explanation": "Helper scale for reorder_within to work in facets."
  },
  {
    "function": "unnest_tokens",
    "package": "tidytext",
    "explanation": "Split text into tokens (e.g., words, n-grams) producing one-token-per-row. Common args: `token` (e.g., \"words\", \"ngrams\"), `n` for n-grams, `to_lower = TRUE/FALSE`. Output is one-token-per-row."
  },
  {
    "function": "tokenize_words",
    "package": "tokenizers",
    "explanation": "Tokenize text into words; returns a list of character vectors."
  },
  {
    "function": "LDA",
    "package": "topicmodels",
    "explanation": "Estimate a LDA model using for example the VEM algorithm or Gibbs Sampling."
  },
  {
    "function": "collect_metrics",
    "package": "tune",
    "explanation": "Extract metrics (e.g., rmse, accuracy, roc_auc) from resampling objects. Use with `yardstick` metrics; always evaluate on resamples or a test set to avoid optimistic bias."
  },
  {
    "function": "collect_predictions",
    "package": "tune",
    "explanation": "Extract out-of-fold predictions from resampling objects. Use with `yardstick` metrics; always evaluate on resamples or a test set to avoid optimistic bias."
  },
  {
    "function": "fit_resamples",
    "package": "tune",
    "explanation": "fit_resamples()computes a set of performance metrics across one or more resamples. It does not perform any tuning (seetune_grid()andtune_bayes()for that), and is instead used for fitting a single model+recipe or model+formula combination across many resamples."
  },
  {
    "function": "Terms",
    "package": "unknown",
    "explanation": "`Terms()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "VCorpus",
    "package": "unknown",
    "explanation": "`VCorpus()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "VectorSource",
    "package": "unknown",
    "explanation": "`VectorSource()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "Wall",
    "package": "unknown",
    "explanation": "`Wall()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "abs",
    "package": "unknown",
    "explanation": "`abs()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "all_predictors",
    "package": "unknown",
    "explanation": "`all_predictors()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "as.character",
    "package": "unknown",
    "explanation": "`as.character()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "as.dist",
    "package": "unknown",
    "explanation": "`as.dist()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "austen_books",
    "package": "unknown",
    "explanation": "`austen_books()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "bind_rows",
    "package": "unknown",
    "explanation": "`bind_rows()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "bind_tf_idf",
    "package": "unknown",
    "explanation": "`bind_tf_idf()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "cast_dfm",
    "package": "unknown",
    "explanation": "`cast_dfm()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "cast_dtm",
    "package": "unknown",
    "explanation": "`cast_dtm()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "class",
    "package": "unknown",
    "explanation": "`class()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "compact",
    "package": "unknown",
    "explanation": "`compact()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "complete",
    "package": "unknown",
    "explanation": "`complete()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "contains",
    "package": "unknown",
    "explanation": "`contains()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "control_resamples",
    "package": "unknown",
    "explanation": "`control_resamples()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "cosine_similarity",
    "package": "unknown",
    "explanation": "`cosine_similarity()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "cutree",
    "package": "unknown",
    "explanation": "`cutree()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "data.frame",
    "package": "unknown",
    "explanation": "`data.frame()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "desc",
    "package": "unknown",
    "explanation": "`desc()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "dfm",
    "package": "unknown",
    "explanation": "`dfm()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "dfm_remove",
    "package": "unknown",
    "explanation": "`dfm_remove()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "dim",
    "package": "unknown",
    "explanation": "`dim()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "dist",
    "package": "unknown",
    "explanation": "`dist()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "docnames",
    "package": "unknown",
    "explanation": "`docnames()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "element_text",
    "package": "unknown",
    "explanation": "`element_text()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "embedding_glove6b",
    "package": "unknown",
    "explanation": "`embedding_glove6b()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "everything",
    "package": "unknown",
    "explanation": "`everything()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "extract_fit_parsnip",
    "package": "unknown",
    "explanation": "`extract_fit_parsnip()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "factor",
    "package": "unknown",
    "explanation": "`factor()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "geom_crossbar",
    "package": "unknown",
    "explanation": "`geom_crossbar()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "geom_histogram",
    "package": "unknown",
    "explanation": "`geom_histogram()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "geom_line",
    "package": "unknown",
    "explanation": "`geom_line()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "geom_smooth",
    "package": "unknown",
    "explanation": "`geom_smooth()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "geom_tile",
    "package": "unknown",
    "explanation": "`geom_tile()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "get_stopwords",
    "package": "unknown",
    "explanation": "`get_stopwords()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "gsub",
    "package": "unknown",
    "explanation": "`gsub()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "hca_fairytales",
    "package": "unknown",
    "explanation": "`hca_fairytales()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "hclust",
    "package": "unknown",
    "explanation": "`hclust()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "hunspell_stem",
    "package": "unknown",
    "explanation": "`hunspell_stem()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "if_else",
    "package": "unknown",
    "explanation": "`if_else()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "install.packages",
    "package": "unknown",
    "explanation": "`install.packages()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "install_keras",
    "package": "unknown",
    "explanation": "`install_keras()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "is.null",
    "package": "unknown",
    "explanation": "`is.null()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "length",
    "package": "unknown",
    "explanation": "`length()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "library",
    "package": "unknown",
    "explanation": "`library()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "list",
    "package": "unknown",
    "explanation": "`list()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "lm",
    "package": "unknown",
    "explanation": "`lm()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "load",
    "package": "unknown",
    "explanation": "`load()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "log",
    "package": "unknown",
    "explanation": "`log()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "log10",
    "package": "unknown",
    "explanation": "`log10()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "log2",
    "package": "unknown",
    "explanation": "`log2()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "map_dfr",
    "package": "unknown",
    "explanation": "`map_dfr()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "map_int",
    "package": "unknown",
    "explanation": "`map_int()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "matrix",
    "package": "unknown",
    "explanation": "`matrix()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "melt",
    "package": "unknown",
    "explanation": "`melt()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "names",
    "package": "unknown",
    "explanation": "`names()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "nearest_neighbors",
    "package": "unknown",
    "explanation": "`nearest_neighbors()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "nearest_neighbors_2",
    "package": "unknown",
    "explanation": "`nearest_neighbors_2()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "nrow",
    "package": "unknown",
    "explanation": "`nrow()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "percent_format",
    "package": "unknown",
    "explanation": "`percent_format()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "plot",
    "package": "unknown",
    "explanation": "`plot()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "print",
    "package": "unknown",
    "explanation": "`print()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "read.csv",
    "package": "unknown",
    "explanation": "`read.csv()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "reorder",
    "package": "unknown",
    "explanation": "`reorder()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "rep",
    "package": "unknown",
    "explanation": "`rep()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "row_number",
    "package": "unknown",
    "explanation": "`row_number()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "safe_mutate",
    "package": "unknown",
    "explanation": "`safe_mutate()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "sample",
    "package": "unknown",
    "explanation": "`sample()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale",
    "package": "unknown",
    "explanation": "`scale()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale_fill_gradient2",
    "package": "unknown",
    "explanation": "`scale_fill_gradient2()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale_x_log10",
    "package": "unknown",
    "explanation": "`scale_x_log10()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale_y_continuous",
    "package": "unknown",
    "explanation": "`scale_y_continuous()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale_y_log10",
    "package": "unknown",
    "explanation": "`scale_y_log10()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "scale_y_reordered",
    "package": "unknown",
    "explanation": "`scale_y_reordered()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "separate_wider_delim",
    "package": "unknown",
    "explanation": "`separate_wider_delim()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "slice_sample",
    "package": "unknown",
    "explanation": "`slice_sample()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "sort",
    "package": "unknown",
    "explanation": "`sort()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "spacy_initialize",
    "package": "unknown",
    "explanation": "`spacy_initialize()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "spacy_parse",
    "package": "unknown",
    "explanation": "`spacy_parse()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "stopword_rec",
    "package": "unknown",
    "explanation": "`stopword_rec()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "str_remove_all",
    "package": "unknown",
    "explanation": "`str_remove_all()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "substr",
    "package": "unknown",
    "explanation": "`substr()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "summary",
    "package": "unknown",
    "explanation": "`summary()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "system.file",
    "package": "unknown",
    "explanation": "`system.file()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "table",
    "package": "unknown",
    "explanation": "`table()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "tail",
    "package": "unknown",
    "explanation": "`tail()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "textstat_dist",
    "package": "unknown",
    "explanation": "`textstat_dist()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "textstat_frequency",
    "package": "unknown",
    "explanation": "`textstat_frequency()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "textstat_lexdiv",
    "package": "unknown",
    "explanation": "`textstat_lexdiv()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "textstat_simil",
    "package": "unknown",
    "explanation": "`textstat_simil()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "theme",
    "package": "unknown",
    "explanation": "`theme()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "tokenize_character",
    "package": "unknown",
    "explanation": "`tokenize_character()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "tokenize_ngrams",
    "package": "unknown",
    "explanation": "`tokenize_ngrams()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "tokens_select",
    "package": "unknown",
    "explanation": "`tokens_select()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "transpose",
    "package": "unknown",
    "explanation": "`transpose()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "unique",
    "package": "unknown",
    "explanation": "`unique()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "with",
    "package": "unknown",
    "explanation": "`with()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "wordStem",
    "package": "unknown",
    "explanation": "`wordStem()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "wordcloud2",
    "package": "unknown",
    "explanation": "`wordcloud2()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "xlab",
    "package": "unknown",
    "explanation": "`xlab()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "xlim",
    "package": "unknown",
    "explanation": "`xlim()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "ylab",
    "package": "unknown",
    "explanation": "`ylab()` is an R function. Refer to the package documentation for details and examples."
  },
  {
    "function": "head",
    "package": "utils",
    "explanation": "Returns the first or last parts of a vector, matrix, table, data frame or function. Sincehead()andtail()are generic functions, they may also have been extended to other classes."
  },
  {
    "function": "pairwise_pmi",
    "package": "widyr",
    "explanation": "Compute Pointwise Mutual Information between items co-occurring within windows. Converts tidy pairwise data to wide matrices to run efficient linear algebra, then returns tidy results."
  },
  {
    "function": "widely",
    "package": "widyr",
    "explanation": "Convert tidy pairwise data to a wide matrix, apply a function, and return tidy results. Converts tidy pairwise data to wide matrices to run efficient linear algebra, then returns tidy results."
  },
  {
    "function": "widely_svd",
    "package": "widyr",
    "explanation": "Compute SVD on pairwise data using a tidy-friendly wrapper. Converts tidy pairwise data to wide matrices to run efficient linear algebra, then returns tidy results."
  },
  {
    "function": "wordcloud",
    "package": "wordcloud",
    "explanation": "Draw a word cloud of terms sized by frequency."
  },
  {
    "function": "add_model",
    "package": "workflows",
    "explanation": "Attach a model specification to a workflow. Workflows keep preprocessing and model spec together, making resampling/tuning reproducible."
  },
  {
    "function": "add_recipe",
    "package": "workflows",
    "explanation": "Attach a preprocessing recipe to a workflow. Workflows keep preprocessing and model spec together, making resampling/tuning reproducible."
  },
  {
    "function": "workflow",
    "package": "workflows",
    "explanation": "Aworkflowis a container object that aggregates information required to fit and predict from a model. This information might be a recipe used in preprocessing, specified throughadd_recipe(), or the model specification to fit, specified throughadd_model(), or a tailor used in postprocessing, specified throughadd_tailor()."
  },
  {
    "function": "conf_mat_resampled",
    "package": "yardstick",
    "explanation": "Aggregate confusion matrices across resamples. Use with `yardstick` metrics; always evaluate on resamples or a test set to avoid optimistic bias."
  },
  {
    "function": "metric_set",
    "package": "yardstick",
    "explanation": "Bundle selected metrics for evaluation (e.g., rmse, rsq). Use with `yardstick` metrics; always evaluate on resamples or a test set to avoid optimistic bias."
  },
  {
    "function": "roc_curve",
    "package": "yardstick",
    "explanation": "Compute ROC curve points from predicted probabilities versus truths. Use with `yardstick` metrics; always evaluate on resamples or a test set to avoid optimistic bias."
  }
]